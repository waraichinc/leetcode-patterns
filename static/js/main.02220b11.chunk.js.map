{"version":3,"sources":["components/Shared/Tracking/index.js","components/Navigation/index.js","components/Table/filters.js","data/index.js","components/PatternFrequencies/index.js","components/Table/index.js","components/Tips/index.js","components/Acknowledgements/index.js","components/Tabs/index.js","components/App.js","index.js"],"names":["Event","category","action","label","ReactGA","event","Navigation","Navbar","color","light","Container","NavbarBrand","onClick","Nav","className","navbar","NavItem","NavLink","target","href","CreateDropDownListHelper","options","filterValue","setFilter","id","value","onChange","e","localStorage","setItem","map","option","idx","DefaultColumnFilter","column","preFilteredRows","count","length","placeholder","SelectDifficultyColumnFilter","SelectColumnFilter","React","useMemo","set","Set","forEach","row","String","values","split","add","sort","SelectCheckedColumnFilter","filterByCheckbox","val","sortBy","Easy","Medium","Hard","updated","questions","data","i","companyNames","companies","company","name","a","b","difficulty","PatternFrequencies","filters","patternsMap","rows","reduce","acc","original","pattern","Object","create","sortedPatternsByFrequency","keys","showComponent","find","filter","includes","getFrequencyClass","rate","highestFrequency","Math","round","frequencyRate","easy","medium","hard","key","index","Badge","pill","iconPath","process","ProgressBar","total","barClassName","Progress","defaultProps","Table","useState","resetCount","setResetCount","checkedList","JSON","parse","getItem","Array","fill","resizedCheckedList","window","stringify","filteredByCheckbox","checkbox","question","difficultyMap","Total","totalDifficultyCount","setData","difficultyCount","setDifficultyCount","checked","setChecked","showPatterns","setShowPatterns","useEffect","defaultColumn","Filter","minWidth","maxWidth","resetHandler","columns","Header","resetModal","setResetModal","toggleResetModal","title","totalValue","labelPosition","labelStyle","startAngle","lineWidth","background","Button","outline","size","Modal","isOpen","toggle","ModalHeader","ModalFooter","accessor","disableSortBy","Cell","cellInfo","Number","type","q","additive","style","marginBottom","whiteSpace","display","random","floor","questionId","questionSlug","slug","open","premium","disableFilters","url","htmlFor","defaultChecked","icons","unchecked","patterns","Row","toLowerCase","date","Date","month","toLocaleString","day","getDate","year","getFullYear","sortType","tooltipText","frequency","src","alt","useTable","initialState","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","filteredRows","state","prepareRow","borderless","striped","hover","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","Tips","source","imagePath","Blind","Educative","Hackernoon","Acknowledgements","Col","sm","Card","CardImg","top","width","CardBody","CardTitle","CardSubtitle","Tabs","activeTab","setActiveTab","tab","tabs","classnames","active","TabContent","TabPane","tabId","App","trackingID","debug","initialize","pageview","location","pathname","search","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.02220b11.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\n\nconst initGA = (trackingID, options) => {\n  ReactGA.initialize(trackingID, { ...options });\n};\n\nconst PageView = () => {\n  ReactGA.pageview(window.location.pathname + window.location.search);\n};\n\nconst Event = (category, action, label) => {\n  ReactGA.event({\n    category,\n    action,\n    label,\n  });\n};\n\nexport { initGA, PageView, Event };\n","import React from 'react';\nimport {\n  Container,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n} from 'reactstrap';\nimport { FaGithub } from 'react-icons/fa';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst Navigation = () => {\n  return (\n    <Navbar color=\"light\" light>\n      <Container>\n        <NavbarBrand\n          onClick={() =>\n            Event('Navigation', 'Clicked link', 'Leetcode Patterns link')\n          }\n        >\n          Leetcode Patterns\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              target=\"_blank\"\n              href=\"https://github.com/SeanPrashad/leetcode-patterns\"\n              onClick={() => Event('Navigation', 'Clicked link', 'GitHub link')}\n            >\n              <FaGithub />\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nfunction CreateDropDownListHelper(options, filterValue, setFilter, id) {\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        localStorage.setItem(id, e.target.value);\n        setFilter(e.target.value || '');\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, idx) => (\n        <option key={`${idx + option}`} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport function DefaultColumnFilter({\n  // eslint-disable-next-line react/prop-types\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  // eslint-disable-next-line react/prop-types\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || '');\n      }}\n      placeholder={`Search ${count} questions`}\n    />\n  );\n}\n\nexport function SelectDifficultyColumnFilter({\n  column: { filterValue, setFilter, id },\n}) {\n  const options = ['Easy', 'Medium', 'Hard'];\n\n  return CreateDropDownListHelper(options, filterValue, setFilter, id);\n}\n\nexport function SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  const options = React.useMemo(() => {\n    const set = new Set();\n\n    preFilteredRows.forEach(row => {\n      const values = String(row.values[id]).split(',');\n\n      values.forEach(value => {\n        set.add(value);\n      });\n    });\n\n    return [...set.values()].sort();\n  }, [id, preFilteredRows]);\n\n  return CreateDropDownListHelper(options, filterValue, setFilter, id);\n}\n\nexport function SelectCheckedColumnFilter({\n  column: { filterValue, setFilter, id, filterByCheckbox },\n}) {\n  const options = ['Checked', 'Unchecked'];\n  const filter = val => {\n    setFilter(val);\n    filterByCheckbox();\n  };\n\n  return CreateDropDownListHelper(options, filterValue, filter, id);\n}\n","import questions from './questions.json';\n\nconst sortBy = { Easy: 0, Medium: 1, Hard: 2 };\nconst { updated, data } = questions;\n\nfor (let i = 0; i < data.length; i += 1) {\n  data[i].companyNames = data[i].companies.map(company => company.name);\n}\n\nexport { updated };\nexport default data.sort((a, b) => sortBy[a.difficulty] - sortBy[b.difficulty]);\n","import { Badge } from 'reactstrap';\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport './styles.scss';\n\nconst PatternFrequencies = ({ filters, rows }) => {\n  const patternsMap = rows.reduce((acc, row) => {\n    for (let i = 0; i < row.original.pattern.length; i += 1) {\n      const pattern = row.original.pattern[i];\n      acc[pattern] = acc[pattern] + 1 || 1;\n    }\n    return acc;\n  }, Object.create(null));\n  const sortedPatternsByFrequency = Object.keys(patternsMap).sort(\n    (a, b) => patternsMap[b] - patternsMap[a],\n  );\n  const showComponent = filters.find(filter =>\n    ['companies', 'difficulty'].includes(filter.id),\n  );\n\n  const getFrequencyClass = rate => {\n    const highestFrequency = Math.round(\n      patternsMap[sortedPatternsByFrequency[0]],\n    );\n\n    if (highestFrequency / 3 < 1) {\n      return '';\n    }\n\n    const frequencyRate = {\n      easy: Math.round(highestFrequency / 3),\n      medium: Math.round((highestFrequency / 3) * 2),\n      hard: highestFrequency,\n    };\n\n    return Object.keys(frequencyRate).find(key => rate <= frequencyRate[key]);\n  };\n\n  return showComponent ? (\n    <div className=\"pattern-count\">\n      <h5>Problems pattern frequency</h5>\n      {sortedPatternsByFrequency.map((pattern, index) => (\n        <Badge\n          // eslint-disable-next-line react/no-array-index-key\n          key={pattern + index}\n          className={`${getFrequencyClass(patternsMap[pattern])}`}\n          pill\n        >\n          <span\n            data-tip={`${patternsMap[pattern]} \"${pattern}\" related problems`}\n          >\n            {pattern} : {patternsMap[pattern]}\n          </span>\n        </Badge>\n      ))}\n    </div>\n  ) : null;\n};\n\nPatternFrequencies.propTypes = {\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string, value: PropTypes.string }),\n  ).isRequired,\n  rows: PropTypes.arrayOf(\n    PropTypes.shape({\n      original: PropTypes.shape({\n        pattern: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n  ).isRequired,\n};\n\nexport default PatternFrequencies;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Table as ReactTable,\n  Container,\n  Row,\n  Badge,\n  Progress,\n  NavLink,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n} from 'reactstrap';\nimport Toggle from 'react-toggle';\nimport ReactTooltip from 'react-tooltip';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { useTable, useFilters, useSortBy } from 'react-table';\nimport {\n  FaLock,\n  FaExternalLinkAlt,\n  FaRandom,\n  FaQuestionCircle,\n} from 'react-icons/fa';\nimport {\n  DefaultColumnFilter,\n  SelectDifficultyColumnFilter,\n  SelectColumnFilter,\n  SelectCheckedColumnFilter,\n} from './filters';\nimport { Event } from '../Shared/Tracking';\n\nimport questions, { updated } from '../../data';\n\nimport 'react-toggle/style.css';\nimport './styles.scss';\nimport PatternFrequencies from '../PatternFrequencies';\n\nconst iconPath = `${process.env.PUBLIC_URL}/static/icons/`;\n\nconst Table = () => {\n  const [resetCount, setResetCount] = useState(0);\n  let checkedList =\n    JSON.parse(localStorage.getItem('checked')) ||\n    new Array(questions.length).fill(false);\n\n  /* If the user has previously visited the website, then an array in\n  LocalStorage would exist of a certain length which corresponds to which\n  questions they have/have not completed. In the event that we add new questions\n  to the list, then we would need to resize and copy the existing 'checked'\n  array before updating it in LocalStorage in order to transfer their saved\n  progress. */\n  if (checkedList.length !== questions.length) {\n    const resizedCheckedList = new Array(questions.length).fill(false);\n\n    for (let i = 0; i < checkedList.length; i += 1) {\n      resizedCheckedList[i] = checkedList[i];\n    }\n\n    checkedList = resizedCheckedList;\n    window.localStorage.setItem('checked', JSON.stringify(checkedList));\n  }\n\n  const filteredByCheckbox = () => {\n    const checkbox = localStorage.getItem('checkbox') || '';\n    return questions.filter(question => {\n      if (!checkbox) return true;\n      return question.checkbox === checkbox;\n    });\n  };\n\n  for (let i = 0; i < questions.length; i += 1) {\n    if (checkedList[questions[i].id]) {\n      questions[i].checkbox = 'Checked';\n    } else {\n      questions[i].checkbox = 'Unchecked';\n    }\n  }\n\n  const difficultyMap = { Easy: 0, Medium: 0, Hard: 0, Total: 0 };\n  const totalDifficultyCount = {\n    Easy: 0,\n    Medium: 0,\n    Hard: 0,\n    Total: questions.length,\n  };\n  for (let i = 0; i < questions.length; i += 1) {\n    difficultyMap[questions[i].difficulty] += checkedList[questions[i].id];\n    difficultyMap.Total += checkedList[questions[i].id];\n    totalDifficultyCount[questions[i].difficulty] += 1;\n  }\n\n  const [data, setData] = useState(filteredByCheckbox());\n  const [difficultyCount, setDifficultyCount] = useState(difficultyMap);\n  const [checked, setChecked] = useState(checkedList);\n  const [showPatterns, setShowPatterns] = useState(\n    JSON.parse(localStorage.getItem('showPatterns')) || new Array(1).fill(true),\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem('checked', JSON.stringify(checked));\n  }, [checked]);\n\n  useEffect(() => {\n    window.localStorage.setItem('showPatterns', JSON.stringify(showPatterns));\n  }, [showPatterns]);\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      minWidth: 30,\n      maxWidth: 30,\n    }),\n    [],\n  );\n\n  const resetHandler = () => {\n    setChecked(new Array(checked.length).fill(false));\n    setDifficultyCount(() => {\n      return { Easy: 0, Medium: 0, Hard: 0, Total: 0 };\n    });\n    const count = resetCount + 1;\n    setResetCount(count);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Leetcode Patterns',\n        columns: [\n          {\n            Header: () => {\n              const [resetModal, setResetModal] = React.useState(false);\n              const toggleResetModal = () => {\n                setResetModal(!resetModal);\n              };\n\n              return (\n                <span className=\"d-flex flex-column justify-content-between\">\n                  <PieChart\n                    data={[\n                      {\n                        title: 'One',\n                        value: difficultyCount.Total,\n                        color: '#ffa929',\n                      },\n                    ]}\n                    totalValue={totalDifficultyCount.Total}\n                    label={() =>\n                      `${difficultyCount.Total} /\n                      ${totalDifficultyCount.Total}`\n                    }\n                    labelPosition={0}\n                    labelStyle={{\n                      // Needed for Dark Reader to work\n                      fill: 'black',\n                    }}\n                    startAngle={-90}\n                    lineWidth={12}\n                    className=\"progress-pie\"\n                    background=\"#e9ecef\"\n                  />\n                  <Button\n                    className=\"reset-button\"\n                    outline\n                    size=\"sm\"\n                    color=\"danger\"\n                    onClick={toggleResetModal}\n                  >\n                    Reset\n                  </Button>\n                  <Modal isOpen={resetModal} toggle={toggleResetModal}>\n                    <ModalHeader toggle={toggleResetModal}>\n                      Are you sure you want to reset your progress?\n                    </ModalHeader>\n                    <ModalFooter>\n                      <Button onClick={resetHandler} color=\"success\">\n                        Reset\n                      </Button>\n                      <Button onClick={toggleResetModal}>Cancel</Button>\n                    </ModalFooter>\n                  </Modal>\n                </span>\n              );\n            },\n            accessor: 'checkbox',\n            id: 'checkbox',\n            filterByCheckbox: () => {\n              setData(filteredByCheckbox());\n            },\n            disableSortBy: true,\n            Cell: cellInfo => {\n              return (\n                <span data-tip={`Question #${Number(cellInfo.row.id) + 1}`}>\n                  <input\n                    type=\"checkbox\"\n                    checked={checked[cellInfo.row.original.id]}\n                    onChange={() => {\n                      checked[cellInfo.row.original.id] = !checked[\n                        cellInfo.row.original.id\n                      ];\n                      const question = questions.find(\n                        q => q.id === cellInfo.row.original.id,\n                      );\n                      if (checked[cellInfo.row.original.id]) {\n                        question.checkbox = 'Checked';\n                      } else {\n                        question.checkbox = 'Unchecked';\n                      }\n                      const additive = checked[cellInfo.row.original.id]\n                        ? 1\n                        : -1;\n                      difficultyCount[\n                        cellInfo.row.original.difficulty\n                      ] += additive;\n                      difficultyCount.Total += additive;\n                      setDifficultyCount(difficultyCount);\n                      setChecked([...checked]);\n                      setData(filteredByCheckbox());\n                    }}\n                  />\n                </span>\n              );\n            },\n            Filter: SelectCheckedColumnFilter,\n          },\n          {\n            Header: () => {\n              const randomQuestion = () => {\n                const random = Math.floor(Math.random() * questions.length);\n                const questionId = questions[random].id;\n                const questionSlug = questions[questionId].slug;\n                window.open(\n                  `https://leetcode.com/problems/${questionSlug}/`,\n                  '_blank',\n                );\n              };\n              return (\n                <>\n                  <div id=\"difficultyProgress\">\n                    <ProgressBar\n                      style={{ marginBottom: 10 }}\n                      name=\"Easy\"\n                      value={difficultyCount.Easy}\n                      total={totalDifficultyCount.Easy}\n                      barClassName=\"easy\"\n                    />\n                    <ProgressBar\n                      name=\"Medium\"\n                      value={difficultyCount.Medium}\n                      total={totalDifficultyCount.Medium}\n                      barClassName=\"medium\"\n                    />\n                    <ProgressBar\n                      name=\"Hard\"\n                      value={difficultyCount.Hard}\n                      total={totalDifficultyCount.Hard}\n                      barClassName=\"hard\"\n                    />\n                  </div>\n                  <div\n                    style={{ whiteSpace: 'nowrap', display: 'inline-block' }}\n                  >\n                    Questions{' '}\n                    <Button\n                      onClick={randomQuestion}\n                      color=\"dark\"\n                      id=\"random-question-button\"\n                      size=\"sm\"\n                    >\n                      <span data-tip=\"Try a random question!\">\n                        <FaRandom />\n                      </span>\n                    </Button>\n                  </div>\n                </>\n              );\n            },\n            accessor: 'questions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={`https://leetcode.com/problems/${cellInfo.row.original.slug}/`}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked question title',\n                      `${cellInfo.row.original.title} question title`,\n                    );\n                  }}\n                >\n                  {cellInfo.row.original.premium ? (\n                    <span data-tip=\"Requires leetcode premium to view\">\n                      <FaLock />{' '}\n                    </span>\n                  ) : (\n                    ''\n                  )}\n                  {cellInfo.row.original.title}\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: 'Solutions',\n            accessor: 'solutions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              const url = `https://leetcode.com/problems/${cellInfo.row.original.slug}/`;\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={`${url}discuss/?currentPage=1&orderBy=most_votes`}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked solution',\n                      `${cellInfo.row.original.slug} solution`,\n                    );\n                  }}\n                >\n                  <FaExternalLinkAlt />\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: () => {\n              return (\n                // eslint-disable-next-line\n                // eslint-disable-next-line jsx-a11y/label-has-associated-control\n                <label htmlFor=\"pattern-toggle\">\n                  <span>Show/Hide Patterns </span>\n                  <Toggle\n                    id=\"pattern-toggle\"\n                    defaultChecked={showPatterns[0]}\n                    icons={{\n                      checked: null,\n                      unchecked: null,\n                    }}\n                    onChange={() => {\n                      showPatterns[0] = !showPatterns[0];\n                      setShowPatterns([...showPatterns]);\n                    }}\n                  />\n                </label>\n              );\n            },\n            accessor: 'pattern',\n            disableSortBy: true,\n            id: 'pattern',\n            Cell: cellInfo => {\n              const patterns = `${cellInfo.row.original.pattern}`\n                .split(',')\n                .map(pattern => {\n                  if (showPatterns[0] || checked[cellInfo.row.original.id]) {\n                    return (\n                      <Badge key={pattern} pill>\n                        {pattern}\n                      </Badge>\n                    );\n                  }\n\n                  return (\n                    <Badge key={pattern} pill>\n                      ***\n                    </Badge>\n                  );\n                });\n\n              return <Row className=\"patterns\">{patterns}</Row>;\n            },\n\n            Filter: SelectColumnFilter,\n          },\n          {\n            Header: 'Difficulty',\n            accessor: 'difficulty',\n            id: 'difficulty',\n            disableSortBy: true,\n            Cell: cellInfo => (\n              <Row>\n                <Badge\n                  className={cellInfo.row.original.difficulty.toLowerCase()}\n                  pill\n                >\n                  {cellInfo.row.original.difficulty}\n                </Badge>\n              </Row>\n            ),\n            Filter: SelectDifficultyColumnFilter,\n          },\n          {\n            Header: () => {\n              const date = new Date(updated);\n              const month = date.toLocaleString('default', {\n                month: 'long',\n              });\n              const day = date.getDate();\n              const year = date.getFullYear();\n              return (\n                <>\n                  <div\n                    style={{ whiteSpace: 'nowrap', display: 'inline-block' }}\n                  >\n                    Companies{' '}\n                    <span\n                      data-tip={`Companies that have asked these questions in the past year; retrieved from Leetcode Premium on ${month} ${day}, ${year} - thanks to @leo-step!`}\n                    >\n                      <FaQuestionCircle />\n                    </span>\n                  </div>\n                </>\n              );\n            },\n            accessor: 'companyNames',\n            sortType: (a, b) => {\n              if (a.original.companies.length === b.original.companies.length) {\n                return 0;\n              }\n              return a.original.companies.length > b.original.companies.length\n                ? 1\n                : -1;\n            },\n            Cell: cellInfo => {\n              const questionSlug = cellInfo.row.original.slug;\n              const companies = cellInfo.row.original.companies.map(company => {\n                const tooltipText = `Asked by ${company.name} ${company.frequency} times`;\n                return (\n                  <img\n                    key={`${questionSlug}-${company.name}`}\n                    src={`${iconPath}${company.slug}.png`}\n                    alt={company.name}\n                    data-tip={tooltipText}\n                  />\n                );\n              });\n\n              return <Row className=\"companies\">{companies}</Row>;\n            },\n            Filter: SelectColumnFilter,\n          },\n        ],\n      },\n    ],\n    // eslint-disable-next-line\n    [resetCount],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    filteredRows,\n    state: { filters },\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: {\n        filters: [\n          {\n            id: 'checkbox',\n            value: localStorage.getItem('checkbox') || '',\n          },\n          {\n            id: 'difficulty',\n            value: localStorage.getItem('difficulty') || '',\n          },\n          {\n            id: 'pattern',\n            value: localStorage.getItem('pattern') || '',\n          },\n          {\n            id: 'companyNames',\n            value: localStorage.getItem('companyNames') || '',\n          },\n        ],\n      },\n    },\n    useFilters,\n    useSortBy,\n  );\n\n  return (\n    <Container className=\"table\">\n      <ReactTooltip />\n      <PatternFrequencies filters={filters} rows={filteredRows} />\n      <ReactTable borderless striped hover {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  <div {...column.getSortByToggleProps({ title: null })}>\n                    {column.render('Header')}\n                    {/* eslint-disable-next-line no-nested-ternary */}\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' 🔽'\n                        : ' 🔼'\n                      : ''}\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </ReactTable>\n    </Container>\n  );\n};\n\nconst ProgressBar = ({ name, value, total, className, barClassName }) => {\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <div>{name}</div>\n        <div>\n          {value}/{total}\n        </div>\n      </div>\n      <Progress\n        className={className}\n        barClassName={barClassName}\n        value={(value / total) * 100}\n      />\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  barClassName: PropTypes.string,\n};\n\nProgressBar.defaultProps = {\n  className: 'progress-bar-sm',\n  barClassName: null,\n};\n\nexport default Table;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport './styles.scss';\n\nconst Tips = () => {\n  const input = `\n  \\`\\`\\`md\nIf input array is sorted then\n- Binary search\n- Two pointers\n\nIf asked for all permutations/subsets then\n- Backtracking\n\nIf given a tree then\n- DFS\n- BFS\n\nIf given a graph then\n- DFS\n- BFS\n\nIf given a linked list then\n- Two pointers\n\nIf recursion is banned then\n- Stack\n\nIf must solve in-place then\n- Swap corresponding values\n- Store one or more different values in the same pointer\n\nIf asked for maximum/minimum subarray/subset/options then\n- Dynamic programming\n\nIf asked for top/least K items then\n- Heap\n- QuickSelect\n\nIf asked for common strings then\n- Map\n- Trie\n\nElse\n- Map/Set for O(1) time & O(n) space\n- Sort input for O(nlogn) time and O(1) space\n\\`\\`\\``;\n\n  return <ReactMarkdown className=\"tips\" source={input} />;\n};\n\nexport default Tips;\n","import React from 'react';\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  NavLink,\n  Row,\n  Col,\n  Container,\n} from 'reactstrap';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst imagePath = `${process.env.PUBLIC_URL}/static/images/`;\nconst Blind = `${imagePath}Blind.png`;\nconst Educative = `${imagePath}Educative.png`;\nconst Hackernoon = `${imagePath}Hackernoon.png`;\n\nconst Acknowledgements = () => {\n  return (\n    <Container className=\"acknowledgements\">\n      <Row>\n        <h1>\n          The following sources were used in aggregating this question list:\n        </h1>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Blind} alt=\"Blind 75 Question\" />\n            <CardBody>\n              <CardTitle>Blind Curated 75 Question List</CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Blind 75 url');\n                  }}\n                >\n                  https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Educative} alt=\"Educative.io\" />\n            <CardBody>\n              <CardTitle>Grokking the Coding Interview</CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.educative.io/courses/grokking-the-coding-interview\"\n                  onClick={() => {\n                    Event(\n                      'Acknowledgements',\n                      'Clicked URL',\n                      'Educative.io url',\n                    );\n                  }}\n                >\n                  https://www.educative.io/courses/grokking-the-coding-interview\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Hackernoon} alt=\"Hackernoon\" />\n            <CardBody>\n              <CardTitle>\n                14 Patterns to Ace Any Coding Interview Question\n              </CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Hackernoon url');\n                  }}\n                >\n                  https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Acknowledgements;\n","import React, { useState } from 'react';\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport { Event } from '../Shared/Tracking';\n\nimport Table from '../Table';\nimport Tips from '../Tips';\nimport Acknowledgements from '../Acknowledgements';\n\nimport './styles.scss';\n\nconst Tabs = () => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  return (\n    <Container>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => {\n              toggle('1');\n              Event('Tabs', 'Clicked Tab', 'Question List tab');\n            }}\n          >\n            Question List\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => {\n              toggle('2');\n              Event('Tabs', 'Clicked Tab', 'Tips tab');\n            }}\n          >\n            Tips\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '3' })}\n            onClick={() => {\n              toggle('3');\n              Event('Tabs', 'Clicked Tab', 'Acknowledgements tab');\n            }}\n          >\n            Acknowledgements\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Table />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Tips />\n        </TabPane>\n        <TabPane tabId=\"3\">\n          <Acknowledgements />\n        </TabPane>\n      </TabContent>\n    </Container>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nimport './styles.scss';\n\nimport Navigation from './Navigation';\nimport Tabs from './Tabs';\n\nimport { initGA, PageView } from './Shared/Tracking';\n\nclass App extends React.Component {\n  componentDidMount() {\n    initGA('UA-203108441-2', { debug: false });\n    PageView();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Tabs />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}